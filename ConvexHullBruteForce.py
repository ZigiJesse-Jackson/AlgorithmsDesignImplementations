import matplotlib.pyplot as plt
from utility import Point, cartesian_product, side_line, points_generator
from typing import List, Tuple, Set


"""Function to generate convex hull using brute force approach

args:
    points(list[Point]): a list of Point objects

returns:
    a set of point objects

"""

def convexhullBruteForce(points: List[Point]) -> Set[Point]:
    E = set()  # set to hold subset of Point objects that form convex hull
               # note: set is used to avoid duplicates since brute force approach does not do so
    orderedPairs = cartesian_product(points, points)  # creating ordered pairs from cartesian product of
                                                     # of list of Point objects

    for pair in orderedPairs:
        if pair[0] == pair[1]:  # removing ordered pairs that contain a duplicate pair of Point objects
            continue
        isEdge = True
        for r in points:
            if r == pair[0] or r == pair[1]:  # checking that Point r is not in ordered pair
                continue
            if side_line(pair, r) == -1:  # checking that Point r does not fall on left side of line
                isEdge = False           # generated by current ordered pair
        if isEdge:  # if no point falls on left of current ordered pair, add Point objects in ordered
            E.add(pair[0])  # to subset that constitutes convex hull of points
            E.add(pair[1])
    return E


points = points_generator(20)
convexhull = convexhullBruteForce(points)

xPoints = [x.x for x in points]
yPoints = [y.y for y in points]

xPointsHull = [x.x for x in convexhull]
yPointsHull = [y.y for y in convexhull]

plt.plot(xPoints, yPoints, 'bo', label='Regular Points')
plt.plot(xPointsHull, yPointsHull, 'ro', label='Convex Hull points')
plt.legend()
plt.show()


